version: '3.8'

services:
  # LocalStack for AWS services simulation
  localstack:
    image: localstack/localstack:latest
    container_name: crypto-localstack
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - SERVICES=kinesis,lambda,s3,redshift,glue,cloudwatch,sns
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOTE_DOCKER=false
      - KINESIS_PROVIDER=kinesis-mock
      - REDSHIFT_PROVIDER=redshift-mock
    volumes:
      - "${TMPDIR:-/tmp}/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - crypto-network

  # PostgreSQL as Redshift substitute for local development
  postgres:
    image: postgres:15
    container_name: crypto-postgres
    environment:
      POSTGRES_DB: crypto_analytics
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/analytics/sql/:/docker-entrypoint-initdb.d/
    networks:
      - crypto-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto-network

  # Jupyter for data exploration
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: crypto-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=your_token_here
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    depends_on:
      - postgres
      - redis
    networks:
      - crypto-network

  # Grafana for local monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - crypto-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crypto-network

  # Data producer for testing
  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: crypto-producer
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - KINESIS_STREAM_NAME=crypto-market-data
      - ENVIRONMENT=development
    depends_on:
      - localstack
    networks:
      - crypto-network
    profiles:
      - producer

  # Lambda function for local testing
  lambda:
    build:
      context: .
      dockerfile: Dockerfile.lambda
    container_name: crypto-lambda
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      - localstack
    networks:
      - crypto-network
    profiles:
      - lambda

  # Health check service
  health-check:
    build:
      context: .
      dockerfile: Dockerfile.health
    container_name: crypto-health-check
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      - localstack
      - postgres
      - redis
    networks:
      - crypto-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  crypto-network:
    driver: bridge 