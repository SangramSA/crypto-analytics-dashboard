name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.9'

jobs:
  # Code Quality and Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[dev]

      - name: Run Black (code formatting)
        run: |
          black --check --diff src/ tests/

      - name: Run Flake8 (linting)
        run: |
          flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run MyPy (type checking)
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional

      - name: Run Bandit (security scanning)
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Trivy (vulnerability scanning)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[test]

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: crypto_analytics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[test]

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/crypto_analytics_test
        run: |
          pytest tests/integration/ -v

  # Load Tests
  load-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[test]

      - name: Run load tests
        run: |
          pytest tests/load/ -v

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: load-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Build Lambda package
        run: |
          mkdir -p dist
          cd src/lambda/stream_processor
          zip -r ../../../dist/lambda-function.zip .

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v3
        with:
          name: lambda-function
          path: dist/lambda-function.zip

  # Terraform Validation
  terraform-validate:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=dev.tfvars

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Deploy to staging
        run: |
          cd infrastructure/terraform
          terraform init
          terraform apply -var-file=staging.tfvars -auto-approve

      - name: Deploy Lambda function
        run: |
          aws lambda update-function-code \
            --function-name crypto-stream-processor-staging \
            --zip-file fileb://dist/lambda-function.zip

      - name: Run smoke tests
        run: |
          python scripts/health_check.py --environment staging

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Deploy to production
        run: |
          cd infrastructure/terraform
          terraform init
          terraform apply -var-file=production.tfvars -auto-approve

      - name: Deploy Lambda function
        run: |
          aws lambda update-function-code \
            --function-name crypto-stream-processor \
            --zip-file fileb://dist/lambda-function.zip

      - name: Run production health checks
        run: |
          python scripts/health_check.py --environment production

      - name: Notify deployment success
        run: |
          echo "Production deployment completed successfully"
          # Add notification logic here (Slack, email, etc.)

  # Performance Monitoring
  performance-monitor:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run performance tests
        run: |
          python scripts/cost_monitor.py
          python scripts/performance_benchmark.py

      - name: Generate performance report
        run: |
          python scripts/generate_report.py --output performance-report.html 